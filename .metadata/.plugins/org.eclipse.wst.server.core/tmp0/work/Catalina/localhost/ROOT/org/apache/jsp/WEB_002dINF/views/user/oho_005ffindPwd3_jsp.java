/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-12-03 00:22:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class oho_005ffindPwd3_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Users/USER/Desktop/SpringOhora/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ProjectOhora/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1731460991358L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 String contextPath =
request.getContextPath(); 
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <meta charset=\"UTF-8\" />\r\n");
      out.write("    <title>오호라 팀 프로젝트</title>\r\n");
      out.write("    <link\r\n");
      out.write("      rel=\"shortcut icon\"\r\n");
      out.write("      type=\"image/x-icon\"\r\n");
      out.write("      href=\"http://localhost/jspPro/images/SiSt.ico\"\r\n");
      out.write("    />\r\n");
      out.write("    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n");
      out.write("    <meta name=\"google\" content=\"notranslate\" />\r\n");
      out.write("    <link\r\n");
      out.write("      href=\"https://fonts.googleapis.com/css?family=Libre+Baskerville&display=swap\"\r\n");
      out.write("      rel=\"stylesheet\"\r\n");
      out.write("    />\r\n");
      out.write("    <link\r\n");
      out.write("      href=\"https://fonts.googleapis.com/css?family=Noto+Sans+KR&display=swap\"\r\n");
      out.write("      rel=\"stylesheet\"\r\n");
      out.write("    />\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("    <div class=\"container\"></div>\r\n");
      out.write("    <span class=\"title\">PASSWORD FIND</span>\r\n");
      out.write("    <span class=\"description\"> 비밀번호 재설정 </span>\r\n");
      out.write("\r\n");
      out.write("    <form\r\n");
      out.write("      class=\"form-container\"\r\n");
      out.write("      id=\"changePwForm\"\r\n");
      out.write("      action=\"/findPwd4.htm\"\r\n");
      out.write("      method=\"post\"\r\n");
      out.write("    >\r\n");
      out.write("      <!-- 아이디 입력란 (읽기 전용) -->\r\n");
      out.write("      <div class=\"label-container\">\r\n");
      out.write("        <span class=\"label-text\">아이디</span>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("      <input\r\n");
      out.write("        type=\"text\"\r\n");
      out.write("        class=\"input-field\"\r\n");
      out.write("        style=\"top: 10px\"\r\n");
      out.write("        name=\"userID\"\r\n");
      out.write("        value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userID}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"\r\n");
      out.write("        readonly\r\n");
      out.write("      />\r\n");
      out.write("\r\n");
      out.write("      ");
      out.write("<!-- 새 비밀번호 입력란 -->\r\n");
      out.write("      <div class=\"label-container\" style=\"top: 55px\">\r\n");
      out.write("        <span class=\"label-text\">새 비밀번호</span>\r\n");
      out.write("      </div>\r\n");
      out.write("      <input\r\n");
      out.write("        type=\"password\"\r\n");
      out.write("        class=\"input-field\"\r\n");
      out.write("        style=\"top: 55px\"\r\n");
      out.write("        id=\"newPasswd\"\r\n");
      out.write("        name=\"new_password\"\r\n");
      out.write("        placeholder=\"새 비밀번호를 입력하세요\"\r\n");
      out.write("      />\r\n");
      out.write("\r\n");
      out.write("      <!-- 비밀번호 안내 메시지 -->\r\n");
      out.write("      <div\r\n");
      out.write("        class=\"label-text\"\r\n");
      out.write("        style=\"position: absolute; top: 95px; left: 170px; font-size: 10px\"\r\n");
      out.write("      >\r\n");
      out.write("        (영문 대소문자/숫자/특수문자 중 2가지 이상 조합, 8자~16자)\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("      <!-- 새 비밀번호 확인 입력란 -->\r\n");
      out.write("      <div class=\"label-container\" style=\"top: 115px\">\r\n");
      out.write("        <span class=\"label-text\">새 비밀번호 확인</span>\r\n");
      out.write("      </div>\r\n");
      out.write("      <input\r\n");
      out.write("        type=\"password\"\r\n");
      out.write("        class=\"input-field\"\r\n");
      out.write("        style=\"top: 115px\"\r\n");
      out.write("        id=\"confirmNewPasswd\"\r\n");
      out.write("        name=\"confirm_password\"\r\n");
      out.write("        placeholder=\"새 비밀번호를 확인하세요\"\r\n");
      out.write("      />\r\n");
      out.write("\r\n");
      out.write("      <!-- 버튼 영역 -->\r\n");
      out.write("      <div class=\"button-container\" id=\"changeBtn\">\r\n");
      out.write("        <button type=\"submit\" class=\"button-text\" onclick=\"\">\r\n");
      out.write("          비밀번호 변경\r\n");
      out.write("        </button>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"cancel-button-container\" id=\"failBtn\">\r\n");
      out.write("        <button type=\"button\" class=\"cancel-button\" onclick=\"\">취소</button>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("      <input\r\n");
      out.write("        type=\"hidden\"\r\n");
      out.write("        name=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${_csrf.parameterName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"\r\n");
      out.write("        value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${_csrf.token}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"\r\n");
      out.write("      />\r\n");
      out.write("    </form>\r\n");
      out.write("\r\n");
      out.write("    <!-- 비밀번호 유효성 검사 함수 -->\r\n");
      out.write("    <script>\r\n");
      out.write("      function validatePassword(password) {\r\n");
      out.write("        // 길이 체크\r\n");
      out.write("        if (password.length < 8 || password.length > 16) {\r\n");
      out.write("          // alert(\"비밀번호는 8자에서 16자 사이여야 합니다.\");\r\n");
      out.write("          return false;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 정규표현식 정의\r\n");
      out.write("        const hasUpperCase = /[A-Z]/.test(password); // 대문자\r\n");
      out.write("        const hasLowerCase = /[a-z]/.test(password); // 소문자\r\n");
      out.write("        const hasNumber = /[0-9]/.test(password); // 숫자\r\n");
      out.write("        const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password); // 특수문자\r\n");
      out.write("\r\n");
      out.write("        // 조건 검사: 4가지 중 2가지 이상 포함해야 함\r\n");
      out.write("        const validConditions = [\r\n");
      out.write("          hasUpperCase,\r\n");
      out.write("          hasLowerCase,\r\n");
      out.write("          hasNumber,\r\n");
      out.write("          hasSpecialChar,\r\n");
      out.write("        ].filter(Boolean).length;\r\n");
      out.write("\r\n");
      out.write("        if (validConditions < 2) {\r\n");
      out.write("          // alert(\"비밀번호는 영문 대소문자, 숫자, 특수문자 중 2가지 이상 조합이어야 합니다.\");\r\n");
      out.write("          return false;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 모든 조건을 만족하는 경우\r\n");
      out.write("        return true;\r\n");
      out.write("      }\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("    <!-- 확인 버튼 -->\r\n");
      out.write("    <script>\r\n");
      out.write("      $(\"#changeBtn\").on(\"click\", function (event) {\r\n");
      out.write("        event.preventDefault();\r\n");
      out.write("\r\n");
      out.write("        let newPasswdVal = $(\"#newPasswd\").val();\r\n");
      out.write("\r\n");
      out.write("        // 첫 번째 조건을 먼저 확인하고, 해당하지 않으면 함수 종료\r\n");
      out.write("        if (!validatePassword(newPasswdVal)) {\r\n");
      out.write("          alert(\"비밀번호 입력 조건을 다시 한번 확인해주세요.\");\r\n");
      out.write("          return; // 조건이 맞지 않으면 이후 코드 실행하지 않음\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 두 번째 조건 확인\r\n");
      out.write("        if ($(\"#confirmNewPasswd\").val() !== newPasswdVal) {\r\n");
      out.write("          alert(\"새 비밀번호 확인이 정확하지 않습니다. 다시 입력해주세요.\");\r\n");
      out.write("          return; // 조건이 맞지 않으면 함수 종료\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 모든 조건을 만족하는 경우 폼 제출\r\n");
      out.write("        $(\"#changePwForm\").submit();\r\n");
      out.write("      });\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("    <!-- 취소 버튼 -->\r\n");
      out.write("    <script>\r\n");
      out.write("      $(\"#failBtn\").on(\"click\", function () {\r\n");
      out.write("        location.href = \"/main.htm\";\r\n");
      out.write("      });\r\n");
      out.write("    </script>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
