package kr.ohora.www.controller;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import kr.ohora.www.domain.UserDTO;
import kr.ohora.www.service.UserService;
import lombok.extern.log4j.Log4j;

@RestController
@Log4j
@RequestMapping("/ajax/*")
public class UserRESTController {

    @Autowired
    private UserService userService;
    
    @Autowired
	private PasswordEncoder passwordEncoder;
    //  <bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
    
    // 중복 체크 
    @GetMapping(value = "/jungbokCK.ajax")
    public Integer jungbokCK(@RequestParam("msgTag") String msgTag, 
    		@RequestParam("val") String value) throws SQLException {
        log.info("중복 체크 요청 받음");

        UserDTO dto = new UserDTO();
        
        if ( msgTag.equals("idMsg") ) {
			dto.setUserLoginId(value);
			
		} else if ( msgTag.equals("emailMsg")) {
			dto.setUserEmail(value);
			
		} else { //폰
			dto.setUserTel(value);
			
		}
  
        try {
            // 중복 체크 메서드 호출
            Integer isDuplicated = this.userService.jungbokCK(dto);
            log.info("> 중복 체크 결과: " + isDuplicated);
            return isDuplicated;
        } catch (SQLException e) {
            log.error("Database error 발생", e);
        }
        
		return 1; // 예외 발생 시 (중복 있음으로 설정)
   
    }
    
    // 인증번호 가져오기
    @GetMapping(value = "/getCode.ajax")
    public String getCode() {
        // 랜덤 숫자 생성
        Random random = new Random();
        int numberCode = 10000 + random.nextInt(90000); 
       
        String authCode = String.valueOf(numberCode);
        
        // 5자리의 랜덤한 수를 인증번호를 생성
        log.info("인증번호를 받았습니다." + authCode);
        
        // BCryptPasswordEncoder를 이용한 암호화
        String encryptedAuthCode = passwordEncoder.encode(authCode);

        // 암호화된 인증번호 확인
        log.info("인증번호는 암호화된 상태로 웹에 저장됨: " + encryptedAuthCode);
        
        // 암호화된 인증 코드를 웹에 저장
        return encryptedAuthCode;
    }
    
    // 인증번호 확인
    @GetMapping(value = "/checkCode.ajax")
    public Integer checkCode(
    		@RequestParam("myCode") String myCode
    		, @RequestParam("authCode") String authCode) {
    	
    	// 웹에서 입력 받은 인증번호 조회
    	log.info("웹에서 입력한 인증번호: " + myCode);
        
    	 // 암호화되어 웹에 저장되어있던 인증번호 조회
        log.info("암호화되어 웹에 저장되어있던 인증번호: " + authCode);
    	
    	// 웹에서 입력된 값과 암호화되어 저장되어 있던 인증번호 비교
        boolean isMatch = passwordEncoder.matches(myCode, authCode);

        if (isMatch) {
            log.info("인증 성공");
            return 1;  // 인증 성공
        } else {
            log.info("인증 실패");
            return 0;  // 인증 실패
        }
        
    }
    
}
